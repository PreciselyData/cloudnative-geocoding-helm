replicaCount: 1

enabled: true

imagePullSecrets: [ ]
nameOverride: "addressing"
fullnameOverride: "addressing"

serviceAccount:
  create: true
  annotations: { }
  name: ""

podAnnotations: { }
podSecurityContext: { }
securityContext: { }

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: false
  className: ""
  annotations: { }
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: [ ]

autoscaling:
  enabled: true
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 70

tolerations: [ ]
affinity: { }


###################################
## CONFIG | Express Engine Data Restore Job
###################################
##
expressEngineDataRestore:
  enabled: true
  image:
    repository: express-engine-data-restore
    pullPolicy: Always
    # Overrides the image tag whose default is the chart appVersion.
    tag: 1.0.0
  ##
  ## Do not update
  ##
  chownUser: 1000
  ##
  ## The nodeSelector configs for the express-engine-data-restore job
  ## - docs for nodeSelector:
  ##   https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector
  ##
  ## Note: This should be a arm based cluster node group
  nodeSelector: { }

  ##
  ## Flag to allow reload of express engine data
  ## Note: This will delete all existing data from the cluster and reload it
  allowDataReload: false

  ##
  ## Manual data vintage configuration for express engine data
  ## Note: Manual data vintage configuration overrides the automatic data vintage configuration
  dataConfig:
    # expressConfig.json: |
    #   {
    #     "nzl": {
    #         "addressing": {
    #             "path": {{printf "%s/%s/%s" .Values.global.efs.expressEngineDataMountPath .Values.global.efs.expressEngineBasePath "addressing/nzl/202312" | quote}},
    #             "vintage": "202312"
    #         }
    #     },
    #     "usa": {
    #         "addressing": {
    #             "path": {{printf "%s/%s/%s" .Values.global.efs.expressEngineDataMountPath .Values.global.efs.expressEngineBasePath "addressing/usa/202309" | quote}},
    #             "vintage": "202309"
    #         }
    #     }
    #   }

expressenginedata:
  enabled: true
  
  autoscaling:
    ## Keep this enabled
    enabled: true
    ##
    ## Warning: Do not reduce the count of minReplicas on helm upgrade. This will lead to data loss
    ##
    minReplicas: 3
    maxReplicas: 12

    targetCPUUtilizationPercentage: 50

  ##
  ## The nodeSelector configs for the express-engine-data-restore job
  ## - docs for nodeSelector:
  ##   https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector
  ##
  ## Note: This should be a arm based cluster node group
  nodeSelector: {}

  ##
  ## Express engine data node group
  ## Note: Do not change
  nodeGroup: "data"

  ##
  ## Note: Do not change
  ##
  persistence:
    enabled: true
    storageClass: '{{include "addressing-exp-storage-class.name" .}}'
    enableInitChown: true
    labels:
      enabled: true
    accessModes:
      - ReadWriteOnce
    size: 200Gi

  ##
  ## Note: Do not change
  ##
  roles:
    - ingest
    - data
    - remote_cluster_client

  ##
  ## Should be 50% of the memory
  ##
  expressEngineJavaOpts: "-Xmx16G -Xms16G"
  
  ##
  ## Note: Do not change
  ##
  ## Express data pods have a hard antiAffinity. One-to-one POD to node scheduling
  antiAffinity: "hard"

  ##
  ## This is the minimum of resources required
  ##
  resources:
    requests:
      cpu: 16
      memory: 32Gi

expressenginemaster:
  enabled: true
  
  ##
  ## Warning: Do not reduce the count of replicas on helm upgrade. This will lead to data loss
  ##
  replicas: 3

  ##
  ## The nodeSelector configs for the express-engine-data-restore job
  ## - docs for nodeSelector:
  ##   https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#nodeselector
  ##
  ## Note: This should be a arm based cluster node group
  nodeSelector: {}

  ##
  ## Express engine master node group
  ## Note: Do not change
  nodeGroup: "master"

  ##
  ## Note: Do not change
  ##
  persistence:
    enabled: true
    storageClass: '{{include "addressing-exp-storage-class.name" .}}'
    enableInitChown: true
    labels:
      enabled: true
    accessModes:
      - ReadWriteOnce
    size: 32Gi

  ##
  ## Note: Do not change
  ##
  roles:
    - ingest
    - master
    - remote_cluster_client

  ##
  ## Note: Do not change
  ##
  ## Express master pods have a hard antiAffinity. Many-to-one POD to node scheduling
  antiAffinity: "custom"

  ##
  ## Should be 50% of the memory
  ##
  expressEngineJavaOpts: "-Xmx3G -Xms3G"

  ##
  ## This is the minimum of resources required
  ##
  resources:
    requests:
      cpu: 2
      memory: 6Gi
    limits:
      cpu: 4
      memory: 6Gi